name: Docker Build and Push

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_run:
    workflows: ["Tests", "CI Pipeline"]
    types:
      - completed

# Cancel in-progress runs when tests fail
concurrency:
  group: docker-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Check if we should build based on test results
  check-tests:
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.check.outputs.should-build }}
    steps:
      - name: Check test status
        id: check
        run: |
          # For workflow_run events, check if tests passed
          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            if [[ "${{ github.event.workflow_run.conclusion }}" != "success" ]]; then
              echo "Tests failed, skipping Docker build"
              echo "should-build=false" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi
          
          # For direct push/PR, we'll check via API if tests are passing
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Get check runs for this commit
            CHECK_RUNS=$(gh api \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              /repos/${{ github.repository }}/commits/${{ github.event.pull_request.head.sha }}/check-runs \
              --jq '.check_runs[] | select(.name | contains("test") or contains("Test")) | .status + ":" + .conclusion')
            
            # If any test is failing, skip build
            if echo "$CHECK_RUNS" | grep -E ":(failure|cancelled|timed_out|action_required)"; then
              echo "Tests are failing, skipping Docker build"
              echo "should-build=false" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            # If tests are still running, wait a bit
            if echo "$CHECK_RUNS" | grep -E "^(queued|in_progress):"; then
              echo "Tests are still running, will retry later"
              echo "should-build=false" >> $GITHUB_OUTPUT
              exit 0
            fi
          fi
          
          echo "should-build=true" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}

  build-and-push:
    runs-on: ubuntu-latest
    needs: check-tests
    if: needs.check-tests.outputs.should-build == 'true'
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

  build-dev-image:
    runs-on: ubuntu-latest
    needs: check-tests
    if: needs.check-tests.outputs.should-build == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/develop'
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push development image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.dev
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:dev
        labels: |
          org.opencontainers.image.title=Coda Development
          org.opencontainers.image.description=Development environment for Coda CLI
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    runs-on: ubuntu-latest
    needs: [check-tests, build-and-push]
    if: needs.check-tests.outputs.should-build == 'true' && github.event_name != 'pull_request'
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'